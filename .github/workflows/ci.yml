name: ci
on:
  push:
    branches:
      - "main"
  pull_request:

permissions: {}

jobs:
  zizmor:
    name: Run zizmor ðŸŒˆ
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Run zizmor ðŸŒˆ
        uses: zizmorcore/zizmor-action@e673c3917a1aef3c65c972347ed84ccd013ecda4 # v0.2.0

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    permissions:
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: setup go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # 6.0.0
        with:
          go-version-file: go.mod

      - name: install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: test
        env:
          FORCE_COLOR: "true"
        run: make testcover GO_TEST_CMD='gotestsum --'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        if: matrix.os == 'ubuntu-latest'
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # required
          verbose: true # optional (default = false)

  build-docker:
    name: Build docker image
    runs-on: ubuntu-latest
    if: (!contains(github.event.head_commit.message, 'skip ci'))
    permissions:
      contents: read
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Check out the repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Build, but don't push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.1
        with:
          context: .
          push: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          build-args: VERSION=${{ github.sha }}

  config-schema:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: setup go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # 6.0.0
        with:
          go-version-file: go.mod

      - name: make schema
        run: make config-schema.json

      - name: Git diff
        run: git diff --exit-code

  corpus:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: setup go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # 6.0.0
        with:
          go-version-file: go.mod

      - name: make corpus-update
        env:
          FORCE_COLOR: "true"
        run: make corpus-update

      - name: Git diff
        run: git diff --exit-code

  go-version:
    runs-on: ubuntu-latest
    name: Check Go version
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Compare versions
        run: |
          GO_MOD_MATCH="$(grep --max-count=1 --only-matching --perl-regexp --line-number '^go \K.*' go.mod)"
          GO_MOD_LINE="$(echo "$GO_MOD_MATCH" | cut -d: -f1)"
          GO_MOD_VERSION="$(echo "$GO_MOD_MATCH" | cut -d: -f2)"

          DOCKERFILE_MATCH="$(grep --max-count=1 --only-matching --perl-regexp --line-number '^FROM .*golang:\K[0-9\.]*' Dockerfile)"
          DOCKERFILE_LINE="$(echo "$DOCKERFILE_MATCH" | cut -d: -f1)"
          DOCKERFILE_VERSION="$(echo "$DOCKERFILE_MATCH" | cut -d: -f2)"

          function err() {
            local file="$1"
            local line="$2"
            shift 2
            local msg="$*"
            echo "::error file=$file,line=$line::$msg" >&2
            exit 1
          }

          if [[ -z "$GO_MOD_VERSION" ]]; then
            err go.mod "$GO_MOD_LINE" "Unable to find version in go.mod"
          fi

          if [[ -z "$DOCKERFILE_VERSION" ]]; then
            err Dockerfile "$DOCKERFILE_LINE" "Unable to find version in Dockerfile"
          fi

          if [[ "$GO_MOD_VERSION" != "$DOCKERFILE_VERSION" ]]; then
            err Dockerfile "$DOCKERFILE_LINE" "Version of image does not match Go version in go.mod"
          fi

          echo "OK"
